import pandas as pd
import uuid
from aiogram import Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from tg_bot.state import AllStates
from tg_bot.kb_constant import menu_kb
from utils import unload_sql_tg, add_id
from _worker.main_compiler import main as main_compiler


async def edit_new(message: Message, state: FSMContext):
    global edit_route_id
    edit_route_id = message.text
    # –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await message.answer(f'–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å uuid –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã signing_route_template')
    await state.set_state(AllStates.stepCreateNew)


async def create_new(message: Message, state: FSMContext):
    global file_uid_list, file_counter, missing_values, edit_route_id

    # –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    missing_values, file_uid_list = [], []
    file_counter = 0
    uuid_check = ''

    try:
        edit_route_id = message.text
        uuid.UUID(edit_route_id)
    except (TypeError, ValueError):
        uuid_check = 'failed'
        if message.text == 'üÜï –°–æ–∑–¥–∞—Ç—å –ú–∞—Ä—à—Ä—É—Ç(—ã)':
            await message.answer(f'–ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å xlsx —Ñ–∞–π–ª')
            await state.set_state(AllStates.stepExportNew)
        else:
            await message.answer(f'–£–∫–∞–∑–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π uuid')
            await message.answer(f'–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å uuid –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã signing_route_template')
            await state.set_state(AllStates.stepCreateNew)

    except NameError:
        edit_route_id = None
        await message.answer(f'–ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å xlsx —Ñ–∞–π–ª')
        await state.set_state(AllStates.stepExportNew)

    if uuid_check != 'failed':
        await message.answer(f'–ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å xlsx —Ñ–∞–π–ª')
        await state.set_state(AllStates.stepExportNew)


async def export_new(message: Message, state: FSMContext, bot: Bot):
    global file_uid_list, missing_values, file_counter, edit_route_id

    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    file_id = message.document
    file_uid = file_id.file_unique_id
    file_uid_list.append(file_uid)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    await bot.download(file_id, f'_worker/data/in/{file_uid}.xlsx', seek=False)

    # –°—á—ë—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    file_counter += 1

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª
        pd.DataFrame(pd.read_excel(open(f'_worker/data/in/{file_uid}.xlsx', 'rb'), engine='openpyxl'))

    except FileNotFoundError:
        await bot.send_message(message.chat.id, '\n–§–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–µ—á–∏—Ç–∞–µ–º–æ–º –¥–ª—è –º–µ–Ω—è —Ñ–æ—Ä–º–∞—Ç–µ (–≤–æ–∑–º–æ–∂–Ω–æ xls)'
                                                '\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å –≤ Google Sheets –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ç—É–¥–∞ –≤ xlsx .',
                               reply_markup=menu_kb())
        await state.set_state(AllStates.stepExportNew)
        return

    except (TypeError, IndexError):
        await bot.send_message(message.chat.id, '\n–§–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –Ω–µ—á–∏—Ç–∞–µ–º–æ–º –¥–ª—è –º–µ–Ω—è —Ñ–æ—Ä–º–∞—Ç–µ.'
                                                '\n–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–∫—Ä—ã—Ç—å –≤ Google Sheets –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Ç—É–¥–∞.',
                               reply_markup=menu_kb())
        await state.set_state(AllStates.stepExportNew)
        return

    # –°–±–æ—Ä –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫—Ä–∏–ø—Ç–µ
    alerts = main_compiler(file_uid, edit_route_id)
    for alert in alerts:
        alert = ['```Alert\n' + alert + '\n```']
        missing_values.append(alert)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if 1 < len(file_uid_list) == file_counter and edit_route_id is not None:
        file_counter = 0
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –±–æ–ª–µ–µ 1 —Ñ–∞–π–ª–∞',
                               reply_markup=menu_kb())
        await state.set_state(AllStates.stepExportNew)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if file_counter == len(file_uid_list):
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ group_id –∏ uid —Ñ–∞–π–ª–æ–≤ –≤ –±–¥
        add_id(file_uid_list)

        # –ö–æ–º–ø–∞–π–ª sql-—Å–∫—Ä–∏–ø—Ç–∞ –∏ pretty-–ø—Ä–µ–≤—å—é
        sql_query, pretty_output = unload_sql_tg(file_uid_list, edit_route_id)

        # –í—ã–≥—Ä—É–∑–∫–∞ sql-—Å–∫—Ä–∏–ø—Ç–∞
        await bot.send_document(message.chat.id, sql_query)

        # –í—ã–≥—Ä—É–∑–∫–∞ pretty-–ø—Ä–µ–≤—å—é
        await bot.send_document(message.chat.id, pretty_output)

        # –í—ã–≥—Ä—É–∑–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫—Ä–∏–ø—Ç–µ
        for missing_value in missing_values:
            for i in missing_value:
                await bot.send_message(message.from_user.id, i,
                                       parse_mode="MarkdownV2",
                                       reply_markup=menu_kb())
